@page "/Lobby"
@using PlayerLink.Shared.Components.User
@using PlayerLink.Shared.Components.Userprofile
@using PlayerLink.Components.Lobby
@using PlayerLink.Components.Lobbybutton
@using PlayerLink.Components.Lobbyfilter
@using PlayerLink.Components.Lobbysearch
@inject PlayerLink.Services.UserDataService UserDataService
@inject PlayerLink.Services.LobbyDataService LobbyDataService
@inject PlayerLink.Services.FilterService FilterService
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

<div class="main">
    @{
        int filteredLobbiesCount = 0;
    }
    <div class="d-flex justify-content-between" id="search-header">
        <div class="d-flex" id="search">
            <Lobbysearch OnSearchValueChanged="HandleSearchValueChanged" />
            <Lobbyfilter />
        </div>
        <div id="create-lobby-button">
            <Lobbybutton />
        </div>


    </div>
    <div id="filtered-lobbies-count">
            @if (searchPerformed)
            {
                <span>Search Results: @filteredLobbyCount</span>
            }
    </div>

    <div>
        @foreach (var gameGroup in LobbyDataService.Lobbies
            .Where(l => l.Game.Contains(currentSearchValue, StringComparison.InvariantCultureIgnoreCase))
            .Where(l => FilterService.DesiredTraits == "" || l.DesiredTags.Any(dt => dt.Contains(FilterService.DesiredTraits, StringComparison.InvariantCultureIgnoreCase)))
            .Where(l => FilterService.UndesiredTraits == "" || l.UndesiredTags.Any(ut => ut.Contains(FilterService.UndesiredTraits, StringComparison.InvariantCultureIgnoreCase)))
            .Where(l => FilterService.YourTraits == "" || l.DescribeYourselfTags.Any(yt => yt.Contains(FilterService.YourTraits, StringComparison.InvariantCultureIgnoreCase)))
            .GroupBy(l => l.Game))
        {
            <div>
                <h3>@gameGroup.Key</h3>
                <div class="lobbies">
                    @{
                        var filteredLobbies = gameGroup.ToList();
                        filteredLobbiesCount += filteredLobbies.Count;

                        Console.WriteLine($"Displaying {filteredLobbies.Count} lobbies for {gameGroup.Key}");
                    }
                    @foreach (var lobby in filteredLobbies)
                    {
                        <LobbyComponent LobbyData="lobby"/>
                    }
                </div>
            </div>
        }
    </div>

</div>

@code {
    private string currentSearchValue = "";
    private bool searchPerformed = false;


    private int filteredLobbyCount => LobbyDataService.Lobbies
        .Where(l => l.Game.Contains(currentSearchValue, StringComparison.InvariantCultureIgnoreCase))
        .Where(l => FilterService.DesiredTraits == "" || l.DesiredTags.Any(dt => dt.Contains(FilterService.DesiredTraits, StringComparison.InvariantCultureIgnoreCase)))
        .Where(l => FilterService.UndesiredTraits == "" || l.UndesiredTags.Any(ut => ut.Contains(FilterService.UndesiredTraits, StringComparison.InvariantCultureIgnoreCase)))
        .Where(l => FilterService.YourTraits == "" || l.DescribeYourselfTags.Any(yt => yt.Contains(FilterService.YourTraits, StringComparison.InvariantCultureIgnoreCase)))
        .Count();
    protected override void OnInitialized()
    {
        LobbyDataService.OnLobbyAdded += UpdateLobbies;
        FilterService.OnChange += UpdateLobbies;
    }

    private void UpdateLobbies()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void HandleSearchValueChanged(string value)
    {
        currentSearchValue = value;
        searchPerformed = true;
        Console.WriteLine($"Search Value: {currentSearchValue}");
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LobbyDataService.OnLobbyAdded -= UpdateLobbies;
        FilterService.OnChange -= UpdateLobbies;
    }
}
